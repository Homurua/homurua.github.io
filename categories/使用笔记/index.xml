<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>使用笔记 on 放学后茶会</title>
        <link>https://wmf.im/categories/%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
        <description>Recent content in 使用笔记 on 放学后茶会</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 19 Mar 2022 03:43:08 +0800</lastBuildDate><atom:link href="https://wmf.im/categories/%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Clash使用笔记</title>
        <link>https://wmf.im/p/clash%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Sat, 19 Mar 2022 03:43:08 +0800</pubDate>
        
        <guid>https://wmf.im/p/clash%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;p&gt;　　程序员基本上离不开科学上网了，clash 是我感觉体验最好的科学上网软件了，就是相比之下有点吃性能，在路由器上跑的话很多 ARM 架构的路由器都跑不利索，不过 x86 的 CPU 跑到带宽上限一般还是没问题的。&lt;/p&gt;
&lt;h2 id=&#34;gui客户端&#34;&gt;GUI客户端&lt;/h2&gt;
&lt;p&gt;　　不管 Windows 还是 Linux 下，都有 &lt;a class=&#34;link&#34; href=&#34;https://github.com/Fndroid/clash_for_windows_pkg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;clash_for_windows_pkg&lt;/a&gt; 可以用。Windows 版本支持非常全面，Bug 也很少，不过 Linux 就一般了，Bug 不少，而且修复的比较慢，只能说是凑合可以用了。&lt;br&gt;
　　Android 平台下可以使用 &lt;a class=&#34;link&#34; href=&#34;https://github.com/Kr328/ClashForAndroid&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ClashForAndroid&lt;/a&gt;，很稳定，功能也比较齐全。&lt;/p&gt;
&lt;h2 id=&#34;命令行客户端&#34;&gt;命令行客户端&lt;/h2&gt;
&lt;h3 id=&#34;部署服务&#34;&gt;部署服务&lt;/h3&gt;
&lt;p&gt;　　在 &lt;a class=&#34;link&#34; href=&#34;https://github.com/Dreamacro/clash/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;clash&lt;/a&gt; 下载适合自己使用的 clash 执行程序。新式 CPU 可以下载 linux-amd64-v3 版本，旧式的 CPU 下载 linux-amd64 版。&lt;a class=&#34;link&#34; href=&#34;https://github.com/golang/go/wiki/MinimumRequirements#amd64&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;v3&lt;/a&gt; 版本可以使用更多的指令集。&lt;br&gt;
　　在 &lt;a class=&#34;link&#34; href=&#34;https://github.com/Dreamacro/maxmind-geoip/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;maxmind-geoip&lt;/a&gt; 下载用于判断主机地址位置的 Country.mmdb 文件。从自己的服务提供商那里下载 config.yaml 文件。执行下面的命令将文件放在对应的位置上。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo mkdir /etc/clash
sudo cp clash /usr/local/bin
sudo cp config.yaml /etc/clash/
sudo cp Country.mmdb /etc/clash/
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;　　创建 systemd 的配置文件 /etc/systemd/system/clash.service :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;k&#34;&gt;[Unit]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;Description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;Clash daemon, A rule-based proxy in Go.&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;After&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;network.target&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;[Service]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;simple&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;Restart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;always&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;ExecStart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;/usr/local/bin/clash -d /etc/clash&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;[Install]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;WantedBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;multi-user.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;　　执行下面的命令让服务启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo systemctl &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; clash
sudo systemctl start clash
sudo systemctl status clash
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;部署网页控制台&#34;&gt;部署网页控制台&lt;/h3&gt;
&lt;p&gt;　　可以使用网页控制台来控制 clash 服务的配置。有很多可以直接使用的控制台程序，比如由 clash 的作者开发的 &lt;a class=&#34;link&#34; href=&#34;https://github.com/Dreamacro/clash-dashboard&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;clash-dashboard&lt;/a&gt; 和广受好评的 &lt;a class=&#34;link&#34; href=&#34;https://github.com/haishanh/yacd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;yacd&lt;/a&gt; 都可以提供比较完善的功能。&lt;br&gt;
　　这些网页控制台可以直接访问作者部署好的地址来使用，但是一般速度堪忧，比如 &lt;a class=&#34;link&#34; href=&#34;http://yacd.haishan.me&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;yacd&lt;/a&gt;，所以还是自己部署比较方便。因为有了 docker 所以部署变得非常简单，以 yacd 为例，安装好 docker 以后只需要一行命令即可在本地部署完成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -p 1234:80 -d --rm haishanh/yacd
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;使用代理&#34;&gt;使用代理&lt;/h2&gt;
&lt;p&gt;　　由于 clash 是自带分流的，不需要在使用的地方进行二次地址过滤，所以使用起来非常简单，直接修改系统代理即可。&lt;br&gt;
　　Windows 和 Linux 直接修改系统代理指向目标地址和端口即可，移动设备也可以在 WIFI 设置里填写代理的地址和端口。&lt;br&gt;
　　如果不希望修改系统代理，则可以修改浏览器的代理，比如 Firefox 可以直接在 “设置” 的 “网络设置” 里填写代理的设置。Chrome 系的浏览器可能不支持，需要使用 &lt;a class=&#34;link&#34; href=&#34;https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Proxy SwitchyOmega&lt;/a&gt; 之类的软件设置代理。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Git使用笔记</title>
        <link>https://wmf.im/p/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Sat, 19 Mar 2022 03:38:47 +0800</pubDate>
        
        <guid>https://wmf.im/p/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;p&gt;　　Git 是当之无愧的最流行版本控制软件，虽然相比 SVN 有一些复杂，但是也有很多优点。本篇用于记录在使用 Git 中的心得。&lt;/p&gt;
&lt;h2 id=&#34;设置代理&#34;&gt;设置代理&lt;/h2&gt;
&lt;p&gt;　　在 github 设置部署代码的时候，会非常非常慢，成功率完全随缘。Git 支持针对指定网站的代理设置，非常方便。&lt;/p&gt;
&lt;h3 id=&#34;https-协议&#34;&gt;HTTPS 协议&lt;/h3&gt;
&lt;p&gt;　　不管在 Windows 还是 Linux 下，都可以通过在用户目录的根目录下，创建一个 .gitconfig 的文件来配置 Git 的代理。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[http]
[http &amp;#34;https://github.com&amp;#34;]
    proxy = http://x.x.x.x:xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;ssh-协议&#34;&gt;SSH 协议&lt;/h3&gt;
&lt;p&gt;　　如果使用 SSH 协议进行 git 操作的话，则需要设置 ssh 程序的代理。在用户的根目录下，ssh 程序会创建一个 .ssh 目录，在 Linux 下是隐藏的。其中的 config 是 ssh 客户端的配置文件，可以增加配置对指定主机设置是否使用代理，设置如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Host github.com
    User git
    ProxyCommand connect -H xxx.xxx.xxx.xxx:1234 %h %p
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;设置用户&#34;&gt;设置用户&lt;/h2&gt;
&lt;p&gt;　　Git 可以在配置中指定当前使用的用户名和电子邮箱地址，设置过以后就不需要每次操作的时候都输入了，设置的位置同样是在用户根目录下的 .gitconfig 中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[user]
    name = xxx
    email = xxx@xxx.com
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;
&lt;h3 id=&#34;配置密钥&#34;&gt;配置密钥&lt;/h3&gt;
&lt;p&gt;　　通过在 setting → SSH and GPG keys 中增加一个 ssh 的公钥即可实现密钥的配置。如果 ssh 本身的密钥配置没有问题的话，在设置过 Git 的用户以后，即可顺利实现对 Github 仓库的无密码访问。&lt;/p&gt;
&lt;h3 id=&#34;默认分支&#34;&gt;默认分支&lt;/h3&gt;
&lt;p&gt;　　由于国外轰轰烈烈的 Black Lives Matter 运动，导致了 Github 将自己默认仓库的分支从 master 改为了 main，但是 Git 本身继续使用 master 作为默认分支。&lt;br&gt;
　　这就导致了一个问题，如果是在本地通过 git init 创建的分支，又关联了 Github 上创建好的一个远程仓库，就会发现这两个仓库的默认分支不一样，需要把本地的仓库默认分支从 master 改为 main 来适应 Github 的修改。&lt;br&gt;
　　也可以在 Github 的 setting → repositories 中设置默认分支的名字。&lt;/p&gt;
&lt;h2 id=&#34;tortoisegit&#34;&gt;TortoiseGit&lt;/h2&gt;
&lt;h3 id=&#34;配置-ssh-工具&#34;&gt;配置 ssh 工具&lt;/h3&gt;
&lt;p&gt;　　Git 的 GUI 工具里，Win 平台下最好用的就是小乌龟了。不过小乌龟有个问题，它是用的自带的 ssh 工具，这样没办法使用配置好的 ssh 密钥，必须再使用它自带的工具生成一个 ppk 格式的密钥来专门给它自己用，比较麻烦。&lt;br&gt;
　　可以通过修改小乌龟的设置，让它使用自带的 ssh 软件，这样可以直接用上命令行配置好的密钥。通过修改 setting → network → ssh client 的软件指向已经安装的 git → usr → bin → ssh.exe 即可完成设置。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
